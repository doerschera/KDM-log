# source: https://us1.prisma.sh/aly-doerscher-4d5fa2/kdm/dev
# timestamp: Sun Oct 28 2018 18:07:50 GMT-0700 (PDT)

type AggregateSurvivor {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSurvivor(data: SurvivorCreateInput!): Survivor!
  updateSurvivor(data: SurvivorUpdateInput!, where: SurvivorWhereUniqueInput!): Survivor
  deleteSurvivor(where: SurvivorWhereUniqueInput!): Survivor
  upsertSurvivor(where: SurvivorWhereUniqueInput!, create: SurvivorCreateInput!, update: SurvivorUpdateInput!): Survivor!
  updateManySurvivors(data: SurvivorUpdateManyInput!, where: SurvivorWhereInput): BatchPayload!
  deleteManySurvivors(where: SurvivorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  survivors(where: SurvivorWhereInput, orderBy: SurvivorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survivor]!
  survivor(where: SurvivorWhereUniqueInput!): Survivor
  survivorsConnection(where: SurvivorWhereInput, orderBy: SurvivorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurvivorConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  survivor(where: SurvivorSubscriptionWhereInput): SurvivorSubscriptionPayload
}

type Survivor implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  gender: String!
}

"""A connection to a list of items."""
type SurvivorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurvivorEdge]!
  aggregate: AggregateSurvivor!
}

input SurvivorCreateInput {
  name: String!
  gender: String!
}

"""An edge in a connection."""
type SurvivorEdge {
  """The item at the end of the edge."""
  node: Survivor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SurvivorOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SurvivorPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  gender: String!
}

type SurvivorSubscriptionPayload {
  mutation: MutationType!
  node: Survivor
  updatedFields: [String!]
  previousValues: SurvivorPreviousValues
}

input SurvivorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SurvivorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurvivorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurvivorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SurvivorWhereInput
}

input SurvivorUpdateInput {
  name: String
  gender: String
}

input SurvivorUpdateManyInput {
  name: String
  gender: String
}

input SurvivorWhereInput {
  """Logical AND on all given filters."""
  AND: [SurvivorWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurvivorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurvivorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  gender: String

  """All values that are not equal to given value."""
  gender_not: String

  """All values that are contained in given list."""
  gender_in: [String!]

  """All values that are not contained in given list."""
  gender_not_in: [String!]

  """All values less than the given value."""
  gender_lt: String

  """All values less than or equal the given value."""
  gender_lte: String

  """All values greater than the given value."""
  gender_gt: String

  """All values greater than or equal the given value."""
  gender_gte: String

  """All values containing the given string."""
  gender_contains: String

  """All values not containing the given string."""
  gender_not_contains: String

  """All values starting with the given string."""
  gender_starts_with: String

  """All values not starting with the given string."""
  gender_not_starts_with: String

  """All values ending with the given string."""
  gender_ends_with: String

  """All values not ending with the given string."""
  gender_not_ends_with: String
}

input SurvivorWhereUniqueInput {
  id: ID
}
